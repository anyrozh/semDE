# -*- coding: utf-8 -*-
"""sem1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PZlKVORIvdtgPzhRC7qds6zZN2GQ_NT7
"""

# Создаем папку для проекта
mkdir seminar1-docker-postgres
cd seminar1-docker-postgres

#Демо 1 - Самый простой голый PostgreSQL.
# Создаем файл docker-compose.yml
cat > docker-compose.yml << 'EOF'
version: "3"
services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: ${PGDATA}
    volumes:
      - ./data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
EOF

# Создаем .env файл
cat > .env << 'EOF'
POSTGRES_DB=postgres
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
PGDATA=/var/lib/postgresql/data/pgdata
EOF

# Создаем папку для миграций
mkdir migrations

# Создаем файл инициализации БД
cat > migrations/init.sql << 'EOF'
CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS orders (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    amount DECIMAL(10,2) NOT NULL,
    status VARCHAR(50) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO users (name, email) VALUES
('Иван Иванов', 'ivan@mail.com'),
('Петр Петров', 'petr@mail.com');

INSERT INTO orders (user_id, amount) VALUES
(1, 100.50),
(1, 200.75),
(2, 50.00);
EOF

# Проверяем созданные файлы
ls -la

# Запускаем контейнер в фоновом режиме
docker-compose up -d ## запускаем контейнер

# Проверяем запущенные контейнеры
docker ps

# Смотрим логи контейнера (должны видеть выполнение нашего init.sql)
docker logs de_sem-postgres-1

# Подключаемся к PostgreSQL с помощью psql
# Если psql не установлен, можно использовать docker exec
docker exec -it de_sem-postgres-1 psql -U postgres -d postgres

##Показываем список таблиц
\dt

## Смотрим данные в таблице users
SELECT * FROM users;

# Выход
\q

# Останавливаем контейнер
docker-compose down

#заходим в нужную мне директорию
cd de_sem

git init

git add . #добавляем все

git commit -m "Первоначальная настройка: Docker контейнер с PostgreSQL, миграции и конфигурация"

git remote add origin git@github.com:anyrozh/semDE.git #Эта команда создает "мост" между вашим локальным репозиторием и удаленным репозиторием на GitHub, позволяя синхронизировать код между ними.
git remote -v
git remote remove origin

git branch -M main #запушить в основную ветку
git push -u origin main
git status

# Создайте папку для первого семинара
mkdir sem1

# Переместите все файлы в папку sem1 (кроме .git)
mv docker-compose.yml migrations/ scripts/ .env.example .gitignore README.md sem1/

# Проверьте структуру
ls -la
ls -la sem1/

# Отредактируйте docker-compose.yml
nano sem1/docker-compose.yml
# Проверьте статус
git status

# Добавьте все новые файлы
git add .

# Сделайте коммит
git commit -m "Реорганизация: создана папка sem1 для первого семинара"

# Отправьте на GitHub
git push origin main